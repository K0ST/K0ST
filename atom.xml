<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[KOST]]></title>
  <subtitle><![CDATA[Do not ship shits.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jinyudong.com/"/>
  <updated>2014-11-13T05:30:26.537Z</updated>
  <id>http://jinyudong.com/</id>
  
  <author>
    <name><![CDATA[Jin Yudong]]></name>
    <email><![CDATA[kost@outlook.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Introducing RecyclerView(一)]]></title>
    <link href="http://jinyudong.com/2014/11/13/Introduce-RecyclerView-%E4%B8%80/"/>
    <id>http://jinyudong.com/2014/11/13/Introduce-RecyclerView-一/</id>
    <published>2014-11-12T16:06:42.000Z</published>
    <updated>2014-11-13T05:28:45.000Z</updated>
    <content type="html"><![CDATA[<p>RecyclerView 是Android L版本中新添加的一个用来取代ListView的SDK，它的灵活性与可替代性比listview更好。接下来通过一系列的文章讲解如何使用RecyclerView,彻底抛弃ListView.</p>
<h2 id="介绍">介绍</h2>
<p>RecyclerView与ListView原理是类似的：都是仅仅维护少量的View并且可以展示大量的数据集。RecyclerView用以下两种方式简化了数据的展示和处理:</p>
<ul>
<li>使用LayoutManager来确定每一个item的排列方式。</li>
<li>为增加和删除项目提供默认的动画效果。 </li>
</ul>
<a id="more"></a>

<p>你也可以定义你自己的LayoutManager和添加删除动画，RecyclerView项目结构如下：</p>
<p><img src="https://developer.android.com/training/material/images/RecyclerView.png" alt=""></p>
<ul>
<li><p>Adapter：使用RecyclerView之前，你需要一个继承自RecyclerView.Adapter的适配器，作用是将数据与每一个item的界面进行绑定。</p>
</li>
<li><p>LayoutManager：用来确定每一个item如何进行排列摆放，何时展示和隐藏。回收或重用一个View的时候，LayoutManager会向适配器请求新的数据来替换旧的数据，这种机制避免了创建过多的View和频繁的调用findViewById方法（与ListView原理类似）。</p>
</li>
</ul>
<p>目前SDK中提供了三种自带的LayoutManager:</p>
<ul>
<li><a href="https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html" target="_blank" rel="external">LinearLayoutManager</a></li>
<li><a href="https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html" target="_blank" rel="external">GridLayoutManager</a></li>
<li><a href="https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.html" target="_blank" rel="external">StaggeredGridLayoutManager</a></li>
</ul>
<h2 id="示例">示例</h2>
<p>本节所示示例是一个最简单的使用方法，在接下来几节中将会介绍更多RecyclerView的别的一些屌爆的用法。作者用的环境是Android Studio 0.8.6。</p>
<h3 id="1、添加依赖">1、添加依赖</h3>
<p>在AS的<code>build.gradle</code>中添加依赖，然后同步一下就可以引入依赖包：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies {</div><div class="line">    <span class="keyword">...</span></div><div class="line">    compile <span class="string">'com.android.support:recyclerview-v7:21.0.+'</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="2、编写代码">2、编写代码</h3>
<p>添加完依赖之后，就开始写代码了，与ListView用法类似，也是先在xml布局文件中创建一个RecyclerView的布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/my_recycler_view"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:scrollbars</span>=<span class="value">"vertical"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>创建完布局之后在MainActivity中获取这个RecyclerView，并声明<code>LayoutManager</code>与<code>Adapter</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mRecyclerView = (RecyclerView)findViewById(R.id.my_recycler_view);</div><div class="line"><span class="comment">//创建默认的线性LayoutManager</span></div><div class="line">mLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">mRecyclerView.setLayoutManager(mLayoutManager);</div><div class="line"><span class="comment">//如果可以确定每个item的高度是固定的，设置这个选项可以提高性能</span></div><div class="line">mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//创建并设置Adapter</span></div><div class="line">mAdapter = <span class="keyword">new</span> MyAdapter(getDummyDatas());</div><div class="line">mRecyclerView.setAdapter(mAdapter);</div></pre></td></tr></table></figure>

<p>接下来的问题就是Adapter的创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>{</div><div class="line">    <span class="keyword">public</span> String[] datas = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="title">MyAdapter</span>(String[] datas) {</div><div class="line">        <span class="keyword">this</span>.datas = datas;</div><div class="line">    }</div><div class="line">    <span class="comment">//创建新View，被LayoutManager所调用</span></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span>(ViewGroup viewGroup, <span class="keyword">int</span> i) {</div><div class="line">        View view = LayoutInflater.from(viewGroup.getContext())</div><div class="line">                .inflate(R.layout.item,viewGroup,<span class="keyword">false</span>);</div><div class="line">        ViewHolder vh = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="keyword">return</span> vh;</div><div class="line">    }</div><div class="line">    <span class="comment">//将数据与界面进行绑定的操作</span></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span>(ViewHolder viewHolder, <span class="keyword">int</span> i) {</div><div class="line">        viewHolder.mTextView.setText(datas[i]);</div><div class="line">    }</div><div class="line">    <span class="comment">//获取数据的数量</span></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span>() {</div><div class="line">        <span class="keyword">return</span> datas.length;</div><div class="line">    }</div><div class="line">    <span class="comment">//自定义的ViewHolder，持有每个Item的的所有界面元素</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>{</div><div class="line">        <span class="keyword">public</span> TextView mTextView;</div><div class="line">        <span class="keyword">public</span> <span class="title">ViewHolder</span>(View view){</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            mTextView = (TextView) view.findViewById(R.id.text);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="3、运行">3、运行</h3>
<p>写完这些代码这个例子既可以跑起来了。从例子也可以看出来，RecyclerView的用法并不比ListView复杂，反而更灵活好用，它将数据、排列方式、数据的展示方式都分割开来，因此可定制型，自定义的形式也非常多，非常灵活。</p>
<p>本节介绍的是一个最最简单的RecyclerView的使用方法，后面将介绍一些更高级的用法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>RecyclerView 是Android L版本中新添加的一个用来取代ListView的SDK，它的灵活性与可替代性比listview更好。接下来通过一系列的文章讲解如何使用RecyclerView,彻底抛弃ListView.</p>
<h2 id="介绍">介绍</h2>
<p>RecyclerView与ListView原理是类似的：都是仅仅维护少量的View并且可以展示大量的数据集。RecyclerView用以下两种方式简化了数据的展示和处理:</p>
<ul>
<li>使用LayoutManager来确定每一个item的排列方式。</li>
<li>为增加和删除项目提供默认的动画效果。 </li>
</ul>
]]>
    
    </summary>
    
      <category term="android" scheme="http://jinyudong.com/tags/android/"/>
    
      <category term="recycler view" scheme="http://jinyudong.com/tags/recycler-view/"/>
    
      <category term="sdk" scheme="http://jinyudong.com/tags/sdk/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio SDK 更新方法]]></title>
    <link href="http://jinyudong.com/2014/11/12/Android-Studio-SDK-Update/"/>
    <id>http://jinyudong.com/2014/11/12/Android-Studio-SDK-Update/</id>
    <published>2014-11-12T14:25:38.000Z</published>
    <updated>2014-11-13T05:30:16.000Z</updated>
    <content type="html"><![CDATA[<p>通常情况下，下载Android SDK需要连接谷歌的服务器进行下载，由于国内水深火热的网络，速度基本为0.好在国内也有一个更新的镜像地址。本文章介绍如何在不翻墙的情况下，使用国内镜像地址，更新android sdk.</p>
<a id="more"></a>

<h2 id="设置host">设置host</h2>
<p>首先在etc/hosts中设置hosts，需要管理员权限。使用vim对hosts进行编辑：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> vim hosts</div></pre></td></tr></table></figure>

<p>输入密码后进行编辑，添加如下几行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Google主页  </span></div><div class="line"><span class="number">203.208</span>.<span class="number">46.146</span> www.google.com  </div><div class="line"><span class="comment">##这行是为了方便打开Android开发官网 现在好像不翻也可以打开  </span></div><div class="line"><span class="number">74.125</span>.<span class="number">113.121</span> developer.android.com  </div><div class="line"><span class="comment">##更新的内容从以下地址下载  </span></div><div class="line"><span class="number">203.208</span>.<span class="number">46.146</span> dl.google.com  </div><div class="line"><span class="number">203.208</span>.<span class="number">46.146</span> dl-ssl.google.com</div></pre></td></tr></table></figure>

<h2 id="更改Android_SDK_Manager设置">更改Android SDK Manager设置</h2>
<p><img src="http://dl2.iteye.com/upload/attachment/0097/7095/7e128ac5-bd43-38f4-8f8d-eaf388138c90.png" alt=""></p>
<p>在Preference中进行设置，修改配置如下：</p>
<blockquote>
<p>HTTP Proxy Server: mirrors.neusoft.edu.cn</p>
<p>HTTP Proxy Port: 80</p>
</blockquote>
<p>然后勾选强制使用http:</p>
<p><img src="http://dl2.iteye.com/upload/attachment/0097/7097/c75ffa94-21b5-3d90-8a22-a55d1c78b5d6.png" alt=""></p>
<p>然后就大功告成，可以愉快飞速的下载Android SDK而不用担心翻墙网速等问题啦。</p>
<p>参考：<a href="http://qianjigui.iteye.com/blog/2074695" target="_blank" rel="external">Android Studio SDK Manager无法正常下载如何设置</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>通常情况下，下载Android SDK需要连接谷歌的服务器进行下载，由于国内水深火热的网络，速度基本为0.好在国内也有一个更新的镜像地址。本文章介绍如何在不翻墙的情况下，使用国内镜像地址，更新android sdk.</p>
]]>
    
    </summary>
    
      <category term="android" scheme="http://jinyudong.com/tags/android/"/>
    
      <category term="android studio" scheme="http://jinyudong.com/tags/android-studio/"/>
    
      <category term="sdk" scheme="http://jinyudong.com/tags/sdk/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to create a ripple effect]]></title>
    <link href="http://jinyudong.com/2014/11/11/How-to-create-ripple-effect/"/>
    <id>http://jinyudong.com/2014/11/11/How-to-create-ripple-effect/</id>
    <published>2014-11-11T15:07:25.000Z</published>
    <updated>2014-11-11T15:15:46.000Z</updated>
    <content type="html"><![CDATA[<p>挖个坑，分析一下Material design 中的ripple effect是如何实现的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>挖个坑，分析一下Material design 中的ripple effect是如何实现的。</p>
]]>
    </summary>
    
      <category term="android" scheme="http://jinyudong.com/tags/android/"/>
    
      <category term="material design" scheme="http://jinyudong.com/tags/material-design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Initial Commit]]></title>
    <link href="http://jinyudong.com/2014/11/08/hello-world/"/>
    <id>http://jinyudong.com/2014/11/08/hello-world/</id>
    <published>2014-11-08T13:38:07.000Z</published>
    <updated>2014-11-11T15:12:10.000Z</updated>
    <content type="html"><![CDATA[<p>Blog starts from here.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Blog starts from here.</p>
]]>
    </summary>
    
  </entry>
  
</feed>
